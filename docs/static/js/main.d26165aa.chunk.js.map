{"version":3,"sources":["components/AddCategory.js","components/GifGridltem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","console","log","onSubmit","e","preventDefault","trim","length","cat","value","onChange","target","type","GifGridltem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cACzB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACAC,QAAQC,IAAIH,GAcb,OAEI,uBAAMI,SAVU,SAACC,GACfA,EAAEC,iBACEN,EAAWO,OAAOC,OAAO,IAC1BV,GAAc,SAAAW,GAAG,OAAGT,GAAH,mBAAiBS,OAClCR,EAAc,MAMnB,UACI,8CACA,uBACIS,MAAOV,EACPW,SAlBc,SAACN,GACtBJ,EAAcI,EAAEO,OAAOF,QAkBhBG,KAAK,a,QCdLC,EAVK,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC3B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACiCO,UAAUF,GAD3C,+DAEDG,MAAMR,GAFL,cAEbS,EAFa,gBAGCA,EAAKC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,sDCoBLK,EAlBA,SAAC,GAAc,IAAbZ,EAAY,EAAZA,SAEb,ECHsB,SAACA,GACvB,MAAyBvB,mBAAS,CAC9B6B,KAAK,GACLO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GAAI,OAAGH,EAAS,CAACT,KAAMY,EAAML,SAAS,SAElD,CAACb,IAEIc,EDT0BK,CAAanB,GAAtCa,EAAR,EAAQA,QAAcH,EAAtB,EAAiBJ,KAEjB,OACI,qCACI,6BAAKN,IACJa,GAAW,yCACZ,qBAAKjB,UAAU,YAAf,SAEOc,EAAOF,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEiB3C2B,EA3BK,WAEjB,MAAkC3C,mBAAS,CAAC,cAA5C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWb,KAAI,SAAAR,GAAQ,OAEnB,aADD,CACE,EAAD,CAAwBA,SAAUA,GAApBA,YChBtCsB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d26165aa.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories})=>{\r\n    const [inputValue, setInputValue]=useState('');\r\n    console.log(inputValue);\r\n\r\n    const handleInputChanges=(e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n         e.preventDefault();\r\n         if (inputValue.trim().length>2) {\r\n            setCategories(cat=>[inputValue,...cat]);\r\n            setInputValue('');\r\n         }\r\n    }\r\n\r\n   return(\r\n\r\n       <form onSubmit={handleSubmit}>\r\n           <h2>Add Category</h2>\r\n           <input\r\n               value={inputValue}\r\n               onChange={handleInputChanges}\r\n               type=\"text\"/>\r\n\r\n       </form>\r\n\r\n   )\r\n\r\n}\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nconst GifGridltem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GifGridltem\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=feKrCSJISyQ7xdpDtJL1d0mE7Wvk9ffs`;\r\n    const resp= await fetch(url)\r\n    const {data}= await resp.json();\r\n\r\n    const gifs= data.map(img=>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n\r\n}\r\n","import React from 'react'\r\nimport GifGridltem from \"./GifGridltem\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid =({category})=>{\r\n\r\n    const { loading, data:images } = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p> Loading</p>}\r\n            <div className=\"card-grid\">\r\n               {\r\n                   images.map(img => <GifGridltem key={img.id} {...img} />)\r\n               }\r\n            </div>\r\n       </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifGrid\r\n","import {useEffect, useState} from 'react'\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs=(category)=>{\r\n    const [state, setState]= useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs=> setState({data: imgs, loading: false}));\r\n\r\n    },[category]);\r\n\r\n    return state\r\n}\r\n","import React, {useState} from 'react';\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = ()=>{\r\n    //const categoria=['One Punch','Samurai X','Dragon Ball']\r\n    const [categories, setCategories]=useState(['One Punch'])\r\n\r\n    // const handleAdd= ()=>{\r\n    //     setCategories([...categories, 'Paco Gomez']);\r\n    //     //setCategories(cats=> [...cats,'Paco Gomez'])\r\n    // }\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                       //<li key={category}>{category}</li>\r\n                        <GifGrid key={category} category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default  GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}